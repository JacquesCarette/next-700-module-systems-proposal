{- (load-file "PackageFormer.el") -}

module Testing where

open import Testing_Generated
open import Level
open import Data.Bool
open import Relation.Binary.PropositionalEquality using (_‚â°_)

{-700

variable
   ‚Ñì : Level

PackageFormer Monoid (v : Variation) : Set where
    _‚®æ_     : Monoid v ‚Üí Monoid v ‚Üí Monoid v
    Id      : Monoid v
    assoc   : ‚àÄ {x y z} ‚Üí (x ‚®æ y) ‚®æ z ‚â° x ‚®æ (y ‚®æ z)
    leftId  : ‚àÄ {x : Monoid v} ‚Üí Id ‚®æ x ‚â° x
    rightId : ‚àÄ {x : Monoid v} ‚Üí x ‚®æ Id ‚â° x
-}


{- Since 700-comments generate code which is imported, we may use their results
   seemingly before their definition -}

_ = MonoidR
open MonoidR‚Ä≤

{-700
MonoidR   = Monoid record
MonoidR‚Ä≤  = Monoid opening MonoidR (Œª x ‚Üí x ++ "‚Ä≤")
MonoidR‚ÇÅ  = Monoid opening MonoidR (Œª x ‚Üí x ++ "‚ÇÅ")
MonoidR‚ÇÇ  = Monoid opening MonoidR (Œª x ‚Üí x ++ "‚ÇÇ")
-}

record Monoid-Hom (ùíÆ ùíØ : MonoidR) : Set where
  open MonoidR‚ÇÅ ùíÆ; open MonoidR‚ÇÇ ùíØ
  field
    mor     : Carrier‚ÇÅ ‚Üí Carrier‚ÇÇ
    id-pres : mor Id‚ÇÅ ‚â° Id‚ÇÇ
    op-pres : ‚àÄ {x y} ‚Üí mor (x ‚®æ‚ÇÅ y) ‚â° mor x ‚®æ‚ÇÇ mor y

{- Below are other examples, from the past. -}

{-700
MonoidTypeclass = Monoid typeclass hiding (_‚®æ_)
MonoidT         = Monoid typeclass renaming (Carrier to C; _‚®æ_ to _‚äï_)
MonoidE         = Monoid record exposing (Carrier; Id)
MonoidB         = Monoid record with (Carrier to Bool; Id to false)
MonoidD         = Monoid data renaming (_‚®æ_ to _Œî_)
-}

-- MonoidR         = Monoid record unbundling 2
-- MonoidD‚Ä≤        = Monoid data decorated (Œª it ‚Üí "‚ï≤" ++ it ++ "‚ï±")

-- Accidentally ‚Äúdatar‚Äù instead of ‚Äúdata‚Äù.
-- Whoops = Monoid datar

_ = MonoidTypeclass
{- record MonoidTypeclass (Carrier : Set) : Set where ‚Ä¶ -}

_ = MonoidT ; open MonoidT using (_‚äï_)
{- record MonoidT (C : Set) : Set where ‚Ä¶ -}

_ = MonoidR
{- record MonoidR (Carrier : Set) (_‚®æ_ : Carrier ‚Üí Carrier ‚Üí Carrier) : Set where ‚Ä¶ -}

_ = MonoidD
{- data MonoidD : Set where ‚Ä¶ -}

_ = MonoidE
{- record MonoidE (Carrier : Set) (Id : Carrier) : Set where ‚Ä¶ -}

_ = MonoidB ; open MonoidB using (leftfalse)
{- record MonoidB : Set‚ÇÄ where ‚Ä¶ -}

-- _ = MonoidD‚Ä≤
