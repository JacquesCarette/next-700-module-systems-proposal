# C-c C-v C-b to execute all code blocks in buffer.

#+TITLE: Package Formers
#+DESCRIPTION: Generalising ADTS, records, typeclasses to “package formers”.
#+AUTHOR: Musa Al-hassy
#+EMAIL: alhassy@gmail.com
#+STARTUP: indent
# PROPERTY: header-args :tangle tangled.agda :comments link

#+CATEGORIES: Agda MetaProgramming Lisp
#+OPTIONS: html-postamble:nil toc:nil d:nil tag:nil
# IMAGE: ../assets/img/org_logo.png
# SOURCE: https://raw.githubusercontent.com/alhassy/org-agda-mode/master/literate.lagda

# INCLUDE: ~/Dropbox/MyUnicodeSymbols.org

* Abstract       :ignore:
#+BEGIN_CENTER org
*Abstract*
#+END_CENTER

Editor extension for supporting “the next 700 module systems”.

Everything here works with Agda version 2.6.0.

#+TOC: headlines 2

* Getting Started

We're going to write a compiler in Lisp that is going to compile
fictitious Agda code ---henceforth referred to as “700 code”---
into currently legitimate Agda code.

For example, something like:
#+BEGIN_Example org-agda
PackageFormer Semigroup (v : Variation) : Set where
  field
    _⨾_ : Semigroup v → Semigroup v → Semigroup v
    Id  : Semigroup v
    assoc : ∀ {x y z} → (x ⨾ y) ⨾ z ≡ x ⨾ (y ⨾ z)

SemigroupR = Semigroup record
SemigroupD = Semigroup data
SemigroupT = Semigroup typeclass
#+END_Example
Will behave as if:
#+BEGIN_Example org-agda
record SemigroupR  : Set where
  field
    Carrier : Set
    _⨾_ : Carrier → Carrier → Carrier
    Id  : Carrier
    assoc : ∀ {x y z} → (x ⨾ y) ⨾ z ≡ x ⨾ (y ⨾ z)

data SemigroupD : Set where
    _⨾_ : SemigroupD → SemigroupD → SemigroupD
    Id  : SemigroupD

record SemigroupT (Carrier : Set) : Set where
  field
    _⨾_ : Carrier → Carrier → Carrier
    Id  : Carrier
    assoc : ∀ {x y z} → (x ⨾ y) ⨾ z ≡ x ⨾ (y ⨾ z)
#+END_Example
This is a nearly 200% increase in size; that is, our fictitious code will
save us a lot of repetition.

* Textual manipulation
Global preconditions:
1. All package formers have exactly one explicit ~Variation~ parameter.
2. The ~where~ keyword appears on the same line as the ~PackageFormer~ key-phrase.
3. The name of the PackageFormer should not contain ~PackageFormer~ as a sub-identifier.
4. The first child of the package former is the ~field~ declaration, on its own line.

#+BEGIN_SRC emacs-lisp
(defvar test
 "
PackageFormer Semigroup (v : Variation) : Set where
  field
    _⨾_ : Semigroup v → Semigroup v → Semigroup v
    Id  : Semigroup v
    assoc : ∀ {x y z} → (x ⨾ y) ⨾ z ≡ x ⨾ (y ⨾ z)

SemigroupR = Semigroup record
SemigroupD = Semigroup data
SemigroupT = Semigroup typeclass
")
#+END_SRC

#+RESULTS:
: test

#+BEGIN_SRC emacs-lisp
(defun get-indentation (string)
  "How many spaces are there at the front of ‘string’?

  Property: The resulting number is ‘≤ length string’.
  "
  (length (s-shared-start string (s-repeat (length string) " ")))
)

(defun get-children (parent the-wild)
  "Go into ‘the-wild’ seeking out the first occurence of ‘parent’,
   who once found, ought to have a minimal indentation for its children.

   “Minimal” in that if there are items with a greater indentation,
    then they are children of children and should be kept.

   Result is the parent followed by its children, as a list of lines.

   Implementation: Look at the indentation of the
   first child, then use that as a lower bound to find the indentation
   of the remaining children.
  "

  (let ( (lines (s-lines the-wild)) (indentation -1) (parent-line nil) )
    ;; Ensure: lines ≈ (parent-here . more-lines)
    (while (not (s-contains? parent (car lines)))
      (setq lines (cdr lines))
      )

    ;; Throw away parent, but keep its contextual line.
    (setq parent-line (car lines))
    (setq lines (cdr lines))

    ;; How far is the first child indented?
    (setq indentation (get-indentation (car lines)))

    ;; Keep only the children that have this level of indentation.
    (setq lines (remove-if-not (lambda (x) (<= indentation (get-indentation x))) lines))

    ;; Yield the parent line along with the children lines.
    (cons parent-line lines)
  )
)

(defun package-former-name (declaration)
  "Given a declaration of the form
   “PackageFormer Semigroup (v : Variation) : Set where”
   return the name “Semigroup”.
  "
  (s-chop-prefix "PackageFormer "
    (s-chop-suffix " ("
      (car (s-match "PackageFormer .* (" declaration))))
)


(defun variation-symbol (declaration)
  "Given a declaration of the form
   “PackageFormer Semigroup (v : Variation) : Set where”
   return the name “v”.
  "
  (s-chop-prefix "("
    (s-chop-suffix " : Variation)"
      (car (s-match "(.*)" declaration))))
)

(defun erase-parameters (declaration)
  "Given a declaration of the form
   “PackageFormer Semigroup (existing-params) : Set ℓ where”
   return
   “PackageFormer Semigroup : Set ℓ where”
  "
  (s-replace
      (car (s-match "(.*)" declaration))
      ""
      declaration)
)

(defun insert-parameter (param declaration)
  "Given a declaration of the form
   “PackageFormer Semigroup (existing-params) : Set ℓ where”
   return
   “PackageFormer Semigroup (existing-params) ‘param’ : Set ℓ where”

   Precondition: ‘param’ is a string.
  "
  (let ((rest-of-line (car (s-match ": Set.*" declaration))))
  (s-replace
      rest-of-line
      (concat param " " rest-of-line)
      declaration)
  )
)

(get-children "PackageFormer" test) ;; Includes "field"
(package-former-name "PackageFormer Semigroup (v : Variation) : Set where") ;; ⇒ "Semigroup"
(variation-symbol "PackageFormer Semigroup (v : Variation) : Set where") ;; ⇒ "v"
(erase-parameters "PackageFormer Semigroup (v : Variation) : Set where") ;; no "v"

(insert-parameter "(Carrier : Set)"
  (erase-parameters "PackageFormer Semigroup (v : Variation) : Set where"))
#+END_SRC

#+RESULTS:
: PackageFormer Semigroup  (Carrier : Set) : Set where

#+BEGIN_SRC emacs-lisp
(cl-defun make-typeclass (decls &optional new-name)

  (let* ((pf (get-children "PackageFormer" decls))
         (header     (car pf))
           (pf-name (package-former-name header))
           (pf-variation (variation-symbol header))
         (field-decl (cadr pf)) ;; In order to maintain user-provided indentation.
         (fields     (cddr pf))
           (tc nil)
         )

  ;; Replace "(? : Variation)" with "(Carrier : Set)".
  (setq header (insert-parameter "(Carrier : Set)" (erase-parameters header)))

;; Replace "PackageFormer" with "record"
(setq header (s-replace "PackageFormer" "record" header))

;; Replace PackageFormer's name with provided typeclass name.
(unless new-name (setq new-name (concat pf-name "-typeclass")))
(setq header (s-replace pf-name new-name header))

  ;; Stick all the pieces together.
  (setq tc (s-join "\n" (cons header (cons field-decl fields))))

  ;; Replace all occurences of “package-former-name followed by variation”
  ;; with ‘Carrier’.
  (setq tc (s-replace (concat pf-name " " pf-variation) "Carrier" tc))

  ;; Declare generation source matter.
  (concat
   "\n{- This was generated from the PackageFormer " pf-name " -}\n"
    tc)
 )
)

(make-typeclass test "SemigroupT")
(make-typeclass test)
#+END_SRC

#+RESULTS:
: record SemigroupT  (Carrier : Set) : Set where
:   field
:     _⨾_ : Carrier → Carrier → Carrier
:     Id  : Carrier
:     assoc : ∀ {x y z} → (x ⨾ y) ⨾ z ≡ x ⨾ (y ⨾ z)

line-move-1

#+BEGIN_SRC emacs-lisp
(defun insert-generated-import (name-of-generated-file)
  "In the current file, find the top-most module declaration
   then insert an import of the generated file.
  "
  (interactive)

  ;; TODO: Remember current location ─this' an excursion.
  (beginning-of-buffer)
  (condition-case the-err
    ;; attemptClause
    (re-search-forward (concat "open import " name-of-generated-file))
     ;; recoveryBody
    (error
     ;; (message-box (format "%s" the-err))
       (re-search-forward "\\(module.*\\)")
       (replace-match (concat "\\1\nopen import " name-of-generated-file))
      )
  )
)
#+END_SRC

#+RESULTS:
: insert-generated-import

#+BEGIN_SRC emacs-lisp

(cl-defun buffer-substring-delimited-whole-buffer (start end)
  "Return a list of all substrings in the current buffer that
   are delimited by regexp tokesn ‘start’ and ‘end’, exclusively.

  TODO: Save current position
  "

  (save-excursion
  (let ((l nil) (continue t))
   (beginning-of-buffer)

   (while continue
     (condition-case nil
       ;; attemptClause
       (setq l (cons (buffer-substring-delimited start end) l))
       ;; recoveryBody
       (error (setq continue nil))))

   ;; We've collected items as we saw them, so ‘l’ is reverse.
  (reverse l)
  )
))

(cl-defun buffer-substring-delimited (start end &optional (highlight nil))
  "
  Get the current buffer's /next/ available substring that is delimited
  between the regexp tokens ‘start’ up to ‘end’, exclusively.

  If no tokens are found, an error is thrown.

  I anticipate non-interactive use primarily and so the ‘highlight’ option
  is off. This option simply highlights the selected region ---visual feedback
  for the user.
  "
  (interactive)
  (let (p1 p2)
    (re-search-forward start)
    (setq p1 (point))

    (re-search-forward end)
    (backward-word)
    (setq p2 (point))

    (when highlight ;; do we want to highlight the region?
      (goto-char p1)
      (push-mark p2)
      (setq mark-active t)
    )

    ;; (copy-region-as-kill p1 p2)
    (buffer-substring-no-properties p1 p2)
))

;; Get text delimited by quotes
;; (buffer-substring-delimited "^\"" "^\"")

;; Get text delimited by quotes
;; (buffer-substring-delimited "^\{-" "^-\}")

;; (setq it (buffer-substring-delimited-whole-buffer "^\{-700" "^-\}"))
#+END_SRC

#+RESULTS:
: buffer-substring-delimited

#+BEGIN_SRC emacs-lisp
(cl-defun reify-instances (decls)
 "
 Look for the next instance of a simple PackageFormer instantation and reify it.
 For example, “MagmaR = Magma record” finds the Magma package former and instantiates
 it to the record variation.

 TODO: This doesn't actually happen yet, for now we emit a typeclass variation
 having the name of the variation declared.
 "
 (let* ( ;;(decls (s-join "\n" (buffer-substring-delimited-whole-buffer "^\{-700" "^-\}")))
        (pf (get-children "PackageFormer" decls))
         (header     (car pf))
           (pf-name (package-former-name header))
           (pf-variation (variation-symbol header))
         (field-decl (cadr pf)) ;; In order to maintain user-provided indentation.
         (fields     (cddr pf))
           (tc nil)
         (variation nil)
           ll
         )

  ;; Buffer-centric: Refiy next single instance
  ;;
  ;; (re-search-forward (concat "= " pf-name))
  ;; (forward-word)
  ;; (setq variation (thing-at-point 'word 'no-properties))

  ;; The variation instantiation declarations, top level.
  (setq decls-vars-shush (remove-if-not (lambda (x) (s-contains?
        (concat "= " pf-name) x)) (s-split "\n" decls)))

  ;; Keep this around since we may want to produce variations wholesale with
  ;; names: packageformer-variation; e.g., Magma-typeclass.
  ;;
  ;;
  ;; the variations
;;  (setq the-vars-shush (--map (car it) (--map (-take-last 1 it) (--map (s-split " " it) decls-vars-shush))))
  ;;
  ;; (dolist (variation the-vars-shush ll)
  ;;  (setq ll (cons (make-typeclass decls (concat pf-name "-" variation)) ll)))

  ;; instantation := “MagmaR = Magma record” ⇒ 4 pieces.
  (dolist (instantation (--map (s-split " " it) decls-vars-shush) ll)
    (setq ll (cons
               (make-typeclass decls (-first-item instantation))
               ll)))

  (s-join "\n" ll)
))

(reify-instances test)
#+END_SRC

#+RESULTS:
#+begin_example

{- This was generated from the PackageFormer Semigroup -}
record SemigroupT  (Carrier : Set) : Set where
  field
    _⨾_ : Carrier → Carrier → Carrier
    Id  : Carrier
    assoc : ∀ {x y z} → (x ⨾ y) ⨾ z ≡ x ⨾ (y ⨾ z)

{- This was generated from the PackageFormer Semigroup -}
record SemigroupD  (Carrier : Set) : Set where
  field
    _⨾_ : Carrier → Carrier → Carrier
    Id  : Carrier
    assoc : ∀ {x y z} → (x ⨾ y) ⨾ z ≡ x ⨾ (y ⨾ z)

{- This was generated from the PackageFormer Semigroup -}
record SemigroupR  (Carrier : Set) : Set where
  field
    _⨾_ : Carrier → Carrier → Carrier
    Id  : Carrier
    assoc : ∀ {x y z} → (x ⨾ y) ⨾ z ≡ x ⨾ (y ⨾ z)
#+end_example


#+BEGIN_SRC emacs-lisp
(defun reify-package-formers (orig-fun &rest args)
  (interactive)

  (message "Reifying package formers...")

  (setq in-buf-pf (s-join "\n" (buffer-substring-delimited-whole-buffer "^\{-700" "^-\}")))

  (setq generated-file-name (concat(file-name-sans-extension (buffer-name))
                  "_Generated"))

(with-temp-buffer
    (beginning-of-buffer)
    (insert (format
"{- This file is generated ;; do not alter. -} \n
open import Relation.Binary.PropositionalEquality using (_≡_)
module %s where \n" generated-file-name))

    ;; reify all instantiations of package formers
    (insert "\n" (reify-instances in-buf-pf))
    ;; (make-typeclass in-buf-pf) ;; TODO: Use optional ‘new-name’ to provide names.


    ;; (mark-whole-buffer)
    (write-region (beginning-of-buffer) (end-of-buffer)
                  (concat generated-file-name ".agda"))

    ;; MA: Using ‘(write-file "Generated.agda")’ means we make a file
    ;; then the temporary buffer /vistis/ the agda file, which loads the
    ;; agda process therein, which is undesirable since it could leave
    ;; agda working on the buffer even after it has been killed!
    ;; This would necessiate calling (agda2-restart) afterwards.
    ;;
    ;; Instead we write the whole region, without visiting the resuting file.
)

  (insert-generated-import generated-file-name)

  ;; call agda2-load
  (apply orig-fun args)
  (message "700 ∷ All the best coding! (•̀ᴗ•́)و")
)

(advice-add 'agda2-load :around #'reify-package-formers)

#+END_SRC

Menu matter.
#+BEGIN_SRC emacs-lisp

(defvar 700-menu-bar-menu (make-sparse-keymap "700 PackageFormers"))
(define-key global-map [menu-bar my-menu] (cons "700PackageFormers" 700-menu-bar-menu))

(defun enable-package-formers ()
 (interactive)
 (advice-add 'agda2-load :around #'reify-package-formers)
 ;; place notification in modeline
 (setq global-mode-string
      (cond ((consp global-mode-string)
             (add-to-list 'global-mode-string "700 (•̀ᴗ•́)و"))
            ((not global-mode-string)
             (list "700 (•̀ᴗ•́)و"))
            ((stringp global-mode-string)
             (list "700 (•̀ᴗ•́)و" global-mode-string))))
)

(defun disable-package-formers ()
 (interactive)
 (advice-remove 'agda2-load #'reify-package-formers)
 (setq global-mode-string (remove "700 (•̀ᴗ•́)و" global-mode-string))
)

(define-key 700-menu-bar-menu [enable-package-formers]
  '(menu-item "Enable PackageFormer Generation" enable-package-formers))

(define-key 700-menu-bar-menu [disable-package-formers]
  '(menu-item "Disable PackageFormer Generation" disable-package-formers))
#+END_SRC

* COMMENT footer

# Local Variables:
# eval: (visual-line-mode t)
# compile-command: (progn (org-babel-tangle) (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# End:
